import org.gradle.api.artifacts.maven.MavenDeployment
import org.gradle.api.artifacts.maven.MavenPom
import org.gradle.api.tasks.wrapper.Wrapper

allprojects {
  apply from: "https://launchpadlibrarian.net/117250874/apply.groovy"
  apply plugin: "maven"
  apply plugin: "signing"
  apply plugin: "idea"

  group = "org.javafunk.funk"

  ext.isReleaseVersion = rootProject.hasProperty("version") && !rootProject.version.endsWith("SNAPSHOT")
  ext.sonatypeRepositoryUrl = isReleaseVersion ?
    "https://oss.sonatype.org/service/local/staging/deploy/maven2/" :
    "https://oss.sonatype.org/content/repositories/snapshots/"
  ext.sonatypeUsername = rootProject.hasProperty("sonatypeUsername") ? sonatypeUsername : ""
  ext.sonatypePassword = rootProject.hasProperty("sonatypePassword") ? sonatypePassword : ""

  repositories {
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/releases/'
    }
  }
}

subprojects {
  apply plugin: "java"

  dependencies {
    testCompile "org.mockito:mockito-core:1.9.0"
    testCompile "junit:junit-dep:4.10"
  }

  def compilerOptions = {
    options.fork = true
    options.forkOptions.memoryMaximumSize = "1024M"
  }

  compileJava(compilerOptions)
  compileTestJava(compilerOptions)

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.2'
}

task emptyPom {
  ext.outputFile = file("$buildDir/poms/pom-default.xml")
  doLast {
    outputFile.getParentFile().mkdirs()
    outputFile.createNewFile()
  }
}

configurations {
  archives
}

artifacts {
  archives(file: emptyPom.ext.outputFile) {
    name 'default'
    type 'pom'
    builtBy emptyPom
  }
}

createReleaseTag.dependsOn uploadArchives

uploadArchives {
  configuration = configurations.archives
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: sonatypeRepositoryUrl) {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom {
        project {
          name 'Funk'
          description 'Functional utilities for Java'
          artifactId 'funk'
          packaging 'pom'
          url 'http://www.javafunk.org'

          modules {
            module "funk-core"
          }

          scm {
            url 'scm:git:https://github.com/javafunk/funk.git'
            connection 'scm:git:https://github.com/javafunk/funk.git'
            developerConnection 'http://github.com/javafunk/funk'
          }

          licenses {
            license {
              name 'BSD License'
              url 'http://www.opensource.org/licenses/bsd-license.php'
            }
          }

          developers {
            developer {
              id 'toby'
              name 'Toby Clemson'
              email 'tobyclemson@gmail.com'
            }
            developer {
              id 'andrew'
              name 'Andrew Kiellor'
              email 'akiellor@gmail.com'
            }
            developer {
              id 'simon'
              name 'Simon Brunning'
              email 'simon@brunningonline.net'
            }
          }
        }
      }
    }
  }
}

def addAsParentFor(MavenPom pom) {
  pom.project {
    parent {
      artifactId 'funk'
      groupId rootProject.group
      version version
      relativePath '../../../build/poms/pom-default.xml'
    }
  }
}
